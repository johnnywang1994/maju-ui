@mixin use-breakpoint($value) {
  @if $value != nth(map-keys($breakpoints), 1) {
    @media (min-width: #{map-get($breakpoints, $value)}px) {
      @content;
    }
  }
  @else {
    @media (min-width: $value) {
      @content;
    }
  }
}

@mixin fullcover {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

@mixin flexbox() {
  display: flex;
  flex-wrap: wrap;
}

@mixin maxsize() {
  width: 100%;
  max-width: 100%;
}

@mixin mx-auto {
  margin-left: auto;
  margin-right: auto;
}

@mixin mx-custom($space) {
  margin-left: $space;
  margin-right: $space;
}

@mixin my-custom($space) {
  margin-top: $space;
  margin-bottom: $space;
}

@mixin flex-center() {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin align-center() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin clearfix() {
  &::after {
    content: '';
    display: table;
    clear: both;
    height: 0;
    visibility: hidden;
  }
}

@mixin aspect-ratio($ratio: 9/16) {
  position: relative;
  width: 100%;
  &::before {
    display: block;
    padding-top: calc(#{$ratio} * 100%);
    content: '';
  }
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

@mixin rwd-fontsize($query-list: (1440, 1280, 1024, 768, 480)) {
  font-size: 100px;
  @for $i from 1 through length($query-list) {
    $query: nth($query-list, $i);
    @media (max-width: #{$query}px) {
      font-size: calc(100vw / #{$query} * 100);
    }
  }
}